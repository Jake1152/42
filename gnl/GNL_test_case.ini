GNL
목적, 목표, 하는 일, 처리과정

- get next line
- fd를 넘겨받아서
  BUFFER SIZE만큼 읽어서 newline이 있으면 newline까지 반환한다.
  남은것은 남긴다.
  fd를 다 읽을때까지 반복한다.

1. fd를 통해서 파일 읽기
2. 버퍼사이즈만큼 읽기
3. 개행이 나오면 개행 있는 부분까지 반환
4. 남은 것은 static변수에 담는다.
5. fd를 다 읽었으면 
   static변수에 남아있는 값들을 읽고 개행이 있으면 반환하고 
   남은 부분은 다시 static에 남긴다.  

-------

GNL test-case

1. buffer 안에 newline이 있는 경우
    1-1 buffer 맨 끝에 newline
    1-2 buffer 내부에 newline 1개
    1-3 buffer 내부에 newline 2개 이상
    1-4 buffer 내부에 newline 연속해서 2개 이상
    1-5 buffer 내부에 newline으로만 구성된 경우    

2. buffer 안에 newline이 없는 경우
    2-1 지금 buffer에 newline없는 경우
    2-2 모든 buffer에 newline없는 경우
    2-3 파일 마지막에 newline있는 경우
    2-4 마지막까지도 newline 없는 경우 EOF만 있다.

3. error 발생한 경우
    3-1 처음부터 error
    3-2 읽다가 중간에 error
        - 마지막에 개행이 있더라도 dsgsfhfghfh23\n
          23을 읽다가 에러나는 경우?
    - 관점의 차이
    - error만 줄것인가?
    - 어디까지 읽었는지 알려줄것인가?
    - 읽은것까지 반환할것인가?
    - 그런데 읽은것만 반환하면 error인지 알 수 없다.
    - error를 반환하는게 더 나을거 같다.
    - 읽은것까지 반환하고 error를 또 보낼 수 없다.
        - 이미 return을 해주었기 때문에
    - 그렇다고 읽은것까지 반환할때 뒤에 무언가 코드를 붙이는건 부자연스럽다.
        - 합의되지 않음
        - 합의 된다해도 복잡해진다.
        - 관리가 깔끔하지 않다.
        - 불필요한 가지
        - 이런식으로 반환값에 무언가 혹처럼 붙이면 헷갈리기 쉬워진다 생각

----

